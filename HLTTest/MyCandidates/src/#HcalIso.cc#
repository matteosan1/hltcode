
// Original Author:  Matteo Sani,40 3-A02,+41227671577,
//         Created:  Thu Feb 14 14:06:52 CET 2013

#include <memory>

#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DataFormats/HLTReco/interface/TriggerEvent.h"
#include "DataFormats/HLTReco/interface/TriggerObject.h"
#include "DataFormats/Common/interface/TriggerResults.h"

#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronFwd.h"
#include "DataFormats/EgammaCandidates/interface/Electron.h"
#include "DataFormats/EgammaCandidates/interface/ElectronFwd.h"
#include "DataFormats/EgammaCandidates/interface/ElectronIsolationAssociation.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
#include "DataFormats/TrackReco/interface/HitPattern.h"

#include "DataFormats/HLTReco/interface/TriggerTypeDefs.h"
#include "DataFormats/HLTReco/interface/TriggerEventWithRefs.h"
#include "DataFormats/RecoCandidate/interface/RecoEcalCandidate.h"
#include "DataFormats/RecoCandidate/interface/RecoEcalCandidateFwd.h"
#include "DataFormats/RecoCandidate/interface/RecoEcalCandidateIsolation.h"

#include "DataFormats/Math/interface/deltaR.h"
#include "DataFormats/Common/interface/ValueMap.h"

#include "TLorentzVector.h"
#include "TFile.h"
#include "TTree.h"

#include <string>
#include <iostream>

class HcalIso : public edm::EDAnalyzer {
public:
  explicit HcalIso(const edm::ParameterSet&);
  ~HcalIso();
    
private:
  virtual void analyze(const edm::Event&, const edm::EventSetup&);
  
  edm::InputTag tagCandCollection, isoMapTag, hltEleCandidates;
  edm::InputTag probeCandCollection, isoMapProbe;
  edm::InputTag sieieMapProbe, hoeMapProbe, hcalMapProbe;
  edm::InputTag detaMapProbe, dphiMapProbe, tkisoMapProbe;
};

HcalIso::HcalIso(const edm::ParameterSet& iConfig) {
  

}

HcalIso::~HcalIso() 
{}

void HcalIso::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  
  //edm::Handle<reco::TrackCollection> tkH;
  //iEvent.getByLabel("hltCtfL1SeededWithMaterialTracks", tkH);
  //
  //for(unsigned int i=0; i<tkH->size(); i++) {
  //  reco::TrackRef tk(tkH, i);
  //  std::cout << tk->trackerExpectedHitsInner().numberOfLostHits() << " " << tk->hitPattern().numberOfLostHits() << std::endl;
  //}

  edm::Handle<reco::GsfElectronCollection> eleH;
  iEvent.getByLabel("gsfElectrons", eleH);

  edm::Handle<edm::ValueMap<double> > isoH;   
  iEvent.getByLabel("eleIsoFromDepsEcalFromHitsByCrystalFull03", isoH);

  edm::Handle<reco::RecoEcalCandidateCollection> tagCandsH;
  iEvent.getByLabel(tagCandCollection, tagCandsH);

  edm::Handle<reco::RecoEcalCandidateCollection> probeCandsH;
  iEvent.getByLabel(probeCandCollection, probeCandsH);

  edm::Handle<reco::ElectronCollection> hltEleH;
  iEvent.getByLabel(hltEleCandidates, hltEleH);

  /*  
  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmProbe4H;
  const reco::RecoEcalCandidateIsolationMap* mapDeta = 0;
  iEvent.getByLabel(detaMapProbe, vmProbe4H);
  if (!vmProbe4H.failedToGet())
    mapDeta = vmProbe4H.product();

  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmProbe5H;
  const reco::RecoEcalCandidateIsolationMap* mapDphi = 0;
  iEvent.getByLabel(dphiMapProbe, vmProbe5H);
  if (!vmProbe5H.failedToGet())
    mapDphi = vmProbe5H.product();
  */

  edm::Handle<reco::ElectronIsolationMap> vmProbe4H;
  const reco::ElectronIsolationMap* mapDeta = 0;
  iEvent.getByLabel(detaMapProbe, vmProbe4H);
  if (!vmProbe4H.failedToGet())
    mapDeta = vmProbe4H.product();

  edm::Handle<reco::ElectronIsolationMap> vmProbe5H;
  const reco::ElectronIsolationMap* mapDphi = 0;
  iEvent.getByLabel(dphiMapProbe, vmProbe5H);
  if (!vmProbe5H.failedToGet())
    mapDphi = vmProbe5H.product();

  edm::Handle<reco::ElectronIsolationMap> vmProbe6H;
  const reco::ElectronIsolationMap* mapTkiso = 0;
  iEvent.getByLabel(tkisoMapProbe, vmProbe6H);
  if (!vmProbe6H.failedToGet())
    mapTkiso = vmProbe6H.product();

  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmTagH;
  const reco::RecoEcalCandidateIsolationMap* mapTag = 0;
  iEvent.getByLabel(isoMapTag, vmTagH);
  if (!vmTagH.failedToGet())
    mapTag = vmTagH.product();

  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmProbe1H;
  const reco::RecoEcalCandidateIsolationMap* mapSieie = 0;
  iEvent.getByLabel(sieieMapProbe, vmProbe1H);
  if (!vmProbe1H.failedToGet())
    mapSieie = vmProbe1H.product();

  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmProbe2H;
  const reco::RecoEcalCandidateIsolationMap* mapHoe = 0;
  iEvent.getByLabel(hoeMapProbe, vmProbe2H);
  if (!vmProbe2H.failedToGet())
    mapHoe = vmProbe2H.product();

  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmProbe3H;
  const reco::RecoEcalCandidateIsolationMap* mapHcal = 0;
  iEvent.getByLabel(hcalMapProbe, vmProbe3H);
  if (!vmProbe3H.failedToGet())
    mapHcal = vmProbe3H.product();

  edm::Handle<reco::RecoEcalCandidateIsolationMap> vmProbeH;
  const reco::RecoEcalCandidateIsolationMap* mapProbe = 0;
  iEvent.getByLabel(isoMapProbe, vmProbeH);
  if (!vmProbeH.failedToGet())
    mapProbe = vmProbeH.product();

  //added Trigger Objects
  edm::InputTag trigEventTag("hltTriggerSummaryAOD","","TEST"); 
  edm::Handle<trigger::TriggerEvent> trigEvent; 
  iEvent.getByLabel(trigEventTag,trigEvent);

  std::vector<std::string> temp_names;
  temp_names.clear();
  
  temp_names.push_back("hltEle17CaloIdVTCaloIsoVTTrkIdTTrkIsoVTEle8PMMassFilter");//hltEle32CaloIdTCaloIsoTTrkIdTTrkIsoTSC17PMMassFilter");
  temp_names.push_back("hltEle17CaloIdVTCaloIsoVTTrkIdTTrkIsoVTEle8TrackIsoFilter");//hltEle32CaloIdTCaloIsoTTrkIdTTrkIsoTSC17TrackIsoFilter");

  std::vector<std::string>::iterator filter_it;

  std::vector<trigger::TriggerObject> ElectronRefs0;
  std::vector<trigger::TriggerObject> ElectronRefs1;

  if (trigEvent.isValid()) {
    for (filter_it = temp_names.begin(); filter_it != temp_names.end(); ++filter_it){
      const trigger::TriggerObjectCollection & triggerObjects = trigEvent->getObjects();
      trigger::size_type filter1_idx = trigEvent -> filterIndex (edm::InputTag(*filter_it,"","TEST") ) ;   
      trigger::size_type n_filters    = trigEvent -> sizeFilters();
      if ( filter1_idx < n_filters ) {
	const trigger::Keys & triggerKeys ( trigEvent -> filterKeys ( filter1_idx ) );
	const int nkeys = triggerKeys.size();
	for (int ikey = 0; ikey < nkeys; ++ikey ) {
	  if (*filter_it == "hltEle17CaloIdVTCaloIsoVTTrkIdTTrkIsoVTEle8PMMassFilter")
	    ElectronRefs0.push_back(triggerObjects[ triggerKeys [ikey] ]);
	  else if (*filter_it == "hltEle17CaloIdVTCaloIsoVTTrkIdTTrkIsoVTEle8TrackIsoFilter")
	    ElectronRefs1.push_back(triggerObjects[ triggerKeys [ikey]]);	  
	}
      }
    }
  }

  hlt_n0 = 0;
  for (unsigned int i=0; i<ElectronRefs0.size(); i++) {
    if (hlt_n0 >= 8) 
      break;
    trigger::TriggerObject pho = ElectronRefs0[i];
    hlt_eta0[i]       = pho.eta();
    hlt_phi0[i]       = pho.phi();
    hlt_et0[i]        = pho.et();
    
    int index = matchElectronToSC(pho, probeCandsH); 
    hlt_ecaliso0[i] = 99999.;
    hlt_hcaliso0[i] = 99999.;
    hlt_hoe0[i]     = 99999.;
    hlt_sieie0[i]   = 99999.;
    hlt_deta0[i]   = 99999.;
    hlt_dphi0[i]   = 99999.;
    hlt_tkiso0[i]   = 99999.;

    //std::cout << index << std::endl;    
    if (index != -1) {
      reco::RecoEcalCandidateRef cand(probeCandsH, index);
      if (mapProbe)
	hlt_ecaliso0[i] = (*mapProbe)[cand];

      if (mapHcal)
	hlt_hcaliso0[i] = (*mapHcal)[cand];

      if (mapHoe)
	hlt_hoe0[i] = (*mapHoe)[cand];

      if (mapSieie)
	hlt_sieie0[i] = (*mapSieie)[cand];
      
      int eleInd = findEleRef(cand, hltEleH);
      //std::cout << eleInd << std::endl;
      if (eleInd != -1) {
	reco::ElectronRef e(hltEleH, eleInd);
	hlt_mishits0[i] = e->track()->hitPattern().numberOfLostHits();

	if (mapDeta)
	  hlt_deta0[i] = (*mapDeta)[e];
	if (mapDphi)
	  hlt_dphi0[i] = (*mapDphi)[e];
	if (mapTkiso)
	  hlt_tkiso0[i] = (*mapTkiso)[e];
      }
    }

    hlt_n0++;
  }

  hlt_n1 = 0;
  for (unsigned int i=0; i<ElectronRefs1.size(); i++) {
    if (hlt_n1 >= 8) 
      break;
    trigger::TriggerObject pho=ElectronRefs1[i];
    hlt_eta1[i] = pho.eta();
    hlt_phi1[i] = pho.phi();
    hlt_et1[i]  = pho.et();

    hlt_ecaliso1[i]   = 99999.;
    if (mapTag) {
      int index = matchElectronToSC(pho, tagCandsH); 
      if (index != -1) {
	reco::RecoEcalCandidateRef cand(tagCandsH, index);
	hlt_ecaliso1[i]   = (*mapTag)[cand];
      }
    }    
    
    hlt_n1++;
  }

  el_n = 0;
  for (unsigned int i=0; i<eleH->size(); i++) {
    reco::GsfElectronRef ele(eleH, i);
    el_et[el_n]  = ele->pt();
    el_eta[el_n] = ele->eta();
    el_phi[el_n] = ele->phi();
    el_iso[el_n] = (*isoH)[ele];
    el_isostd[el_n] = ele->dr03EcalRecHitSumEt();
    el_sieie[el_n] = ele->sigmaIetaIeta();
    el_tkiso[el_n] = ele->dr03TkSumPt();
    el_hoe[el_n] = ele->hcalOverEcal();
    el_hcaliso[el_n] = ele->dr03HcalTowerSumEt();
    el_deta[el_n] = ele->deltaEtaSuperClusterTrackAtVtx();
    el_dphi[el_n] = ele->deltaPhiSuperClusterTrackAtVtx();
    el_mishits[el_n] = ele->gsfTrack()->trackerExpectedHitsInner().numberOfHits();

    el_n++;
  }

  tree->Fill();
}

DEFINE_FWK_MODULE(HcalIso);
